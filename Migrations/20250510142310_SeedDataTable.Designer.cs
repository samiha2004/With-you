// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WithYou_project.Database;

#nullable disable

namespace WithYou_project.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250510142310_SeedDataTable")]
    partial class SeedDataTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("WithYou_project.Database.Entities.Admin", b =>
                {
                    b.Property<int>("AdminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdminId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AdminId");

                    b.ToTable("Admins");

                    b.HasData(
                        new
                        {
                            AdminId = 1,
                            Email = "ali1@example.com",
                            Fname = "Ali",
                            Lname = "Saleh",
                            Password = "Password123",
                            Role = "SuperAdmin"
                        },
                        new
                        {
                            AdminId = 2,
                            Email = "sara@example.com",
                            Fname = "Sara",
                            Lname = "Khalil",
                            Password = "Password1234",
                            Role = "Admin"
                        },
                        new
                        {
                            AdminId = 3,
                            Email = "mona@example.com",
                            Fname = "Mona",
                            Lname = "Naser",
                            Password = "Password1235",
                            Role = "Admin"
                        },
                        new
                        {
                            AdminId = 4,
                            Email = "omar@example.com",
                            Fname = "Omar",
                            Lname = "Sami",
                            Password = "Password1236",
                            Role = "Admin"
                        },
                        new
                        {
                            AdminId = 5,
                            Email = "lina@example.com",
                            Fname = "Lina",
                            Lname = "Ahmad",
                            Password = "Password1237",
                            Role = "Admin"
                        });
                });

            modelBuilder.Entity("WithYou_project.Database.Entities.Article", b =>
                {
                    b.Property<int>("ArticleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ArticleId"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PsychologistId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PublishDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ArticleId");

                    b.HasIndex("PsychologistId");

                    b.ToTable("Articles");

                    b.HasData(
                        new
                        {
                            ArticleId = 1,
                            Content = "Content about depression...",
                            PsychologistId = 1,
                            PublishDate = new DateTime(2022, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Understanding Depression"
                        },
                        new
                        {
                            ArticleId = 2,
                            Content = "Content about therapy...",
                            PsychologistId = 2,
                            PublishDate = new DateTime(2022, 2, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "The Importance of Therapy"
                        },
                        new
                        {
                            ArticleId = 3,
                            Content = "Content about anxiety...",
                            PsychologistId = 3,
                            PublishDate = new DateTime(2022, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "How to Cope with Anxiety"
                        },
                        new
                        {
                            ArticleId = 4,
                            Content = "Content about stress...",
                            PsychologistId = 4,
                            PublishDate = new DateTime(2022, 4, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Overcoming Stress"
                        },
                        new
                        {
                            ArticleId = 5,
                            Content = "Content about neuroscience...",
                            PsychologistId = 5,
                            PublishDate = new DateTime(2022, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Neuroscience and Mental Health"
                        });
                });

            modelBuilder.Entity("WithYou_project.Database.Entities.Message", b =>
                {
                    b.Property<int>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MessageId"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProblemId")
                        .HasColumnType("int");

                    b.Property<int>("PsychologistId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("MessageId");

                    b.HasIndex("ProblemId");

                    b.HasIndex("PsychologistId");

                    b.HasIndex("UserId");

                    b.ToTable("Message");

                    b.HasData(
                        new
                        {
                            MessageId = 1,
                            Content = "I'm feeling very low lately.",
                            ProblemId = 1,
                            PsychologistId = 1,
                            Timestamp = new DateTime(2022, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1
                        },
                        new
                        {
                            MessageId = 2,
                            Content = "I feel anxious about upcoming events.",
                            ProblemId = 2,
                            PsychologistId = 2,
                            Timestamp = new DateTime(2022, 5, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 2
                        },
                        new
                        {
                            MessageId = 3,
                            Content = "Work is really stressful right now.",
                            ProblemId = 3,
                            PsychologistId = 3,
                            Timestamp = new DateTime(2022, 5, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 3
                        },
                        new
                        {
                            MessageId = 4,
                            Content = "I can't control my anger at times.",
                            ProblemId = 4,
                            PsychologistId = 4,
                            Timestamp = new DateTime(2022, 5, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 4
                        },
                        new
                        {
                            MessageId = 5,
                            Content = "I can't sleep at night.",
                            ProblemId = 5,
                            PsychologistId = 5,
                            Timestamp = new DateTime(2022, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 5
                        });
                });

            modelBuilder.Entity("WithYou_project.Database.Entities.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Method")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SessionId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("PaymentId");

                    b.HasIndex("SessionId");

                    b.HasIndex("UserId");

                    b.ToTable("Payment");

                    b.HasData(
                        new
                        {
                            PaymentId = 1,
                            Amount = 100m,
                            Date = new DateTime(2022, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Method = "Credit Card",
                            SessionId = 1,
                            Status = "Paid",
                            UserId = 1
                        },
                        new
                        {
                            PaymentId = 2,
                            Amount = 150m,
                            Date = new DateTime(2022, 5, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Method = "PayPal",
                            SessionId = 2,
                            Status = "Pending",
                            UserId = 2
                        },
                        new
                        {
                            PaymentId = 3,
                            Amount = 120m,
                            Date = new DateTime(2022, 5, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Method = "Debit Card",
                            SessionId = 3,
                            Status = "Paid",
                            UserId = 3
                        },
                        new
                        {
                            PaymentId = 4,
                            Amount = 130m,
                            Date = new DateTime(2022, 5, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Method = "Cash",
                            SessionId = 4,
                            Status = "Paid",
                            UserId = 4
                        },
                        new
                        {
                            PaymentId = 5,
                            Amount = 140m,
                            Date = new DateTime(2022, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Method = "Bank Transfer",
                            SessionId = 5,
                            Status = "Pending",
                            UserId = 5
                        });
                });

            modelBuilder.Entity("WithYou_project.Database.Entities.Problem", b =>
                {
                    b.Property<int>("ProblemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProblemId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DiagnosisDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PsychologistId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ProblemId");

                    b.HasIndex("PsychologistId");

                    b.HasIndex("UserId");

                    b.ToTable("Problem");

                    b.HasData(
                        new
                        {
                            ProblemId = 1,
                            Description = "Struggling with depression",
                            DiagnosisDate = new DateTime(2022, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PsychologistId = 1,
                            Type = "Mental Health",
                            UserId = 1
                        },
                        new
                        {
                            ProblemId = 2,
                            Description = "Anxiety issues",
                            DiagnosisDate = new DateTime(2022, 5, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PsychologistId = 2,
                            Type = "Mental Health",
                            UserId = 2
                        },
                        new
                        {
                            ProblemId = 3,
                            Description = "Stress from work",
                            DiagnosisDate = new DateTime(2022, 5, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PsychologistId = 3,
                            Type = "Mental Health",
                            UserId = 3
                        },
                        new
                        {
                            ProblemId = 4,
                            Description = "Difficulty managing emotions",
                            DiagnosisDate = new DateTime(2022, 5, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PsychologistId = 4,
                            Type = "Emotional Health",
                            UserId = 4
                        },
                        new
                        {
                            ProblemId = 5,
                            Description = "Sleep disorders",
                            DiagnosisDate = new DateTime(2022, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PsychologistId = 5,
                            Type = "Physical Health",
                            UserId = 5
                        });
                });

            modelBuilder.Entity("WithYou_project.Database.Entities.Psychologist", b =>
                {
                    b.Property<int>("PsychologistId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PsychologistId"));

                    b.Property<string>("Certificates")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ExperienceYears")
                        .HasColumnType("int");

                    b.Property<string>("Fname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Specialization")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PsychologistId");

                    b.ToTable("Psychologiest");

                    b.HasData(
                        new
                        {
                            PsychologistId = 1,
                            Certificates = "PhD in Psychology",
                            Email = "ahmed@example.com",
                            ExperienceYears = 10,
                            Fname = "Dr. Ahmed",
                            Lname = "Sami",
                            Password = "pswd123",
                            Specialization = "Clinical"
                        },
                        new
                        {
                            PsychologistId = 2,
                            Certificates = "Masters in Counseling",
                            Email = "noura@example.com",
                            ExperienceYears = 5,
                            Fname = "Dr. Noura",
                            Lname = "Almasri",
                            Password = "pswd123",
                            Specialization = "Counseling"
                        },
                        new
                        {
                            PsychologistId = 3,
                            Certificates = "PhD in Behavioral Science",
                            Email = "samer@example.com",
                            ExperienceYears = 12,
                            Fname = "Dr. Samer",
                            Lname = "Hassan",
                            Password = "pswd123",
                            Specialization = "Behavioral"
                        },
                        new
                        {
                            PsychologistId = 4,
                            Certificates = "Masters in Psychology",
                            Email = "mona@example.com",
                            ExperienceYears = 8,
                            Fname = "Dr. Mona",
                            Lname = "Tariq",
                            Password = "pswd123",
                            Specialization = "Therapist"
                        },
                        new
                        {
                            PsychologistId = 5,
                            Certificates = "PhD in Neuroscience",
                            Email = "layla@example.com",
                            ExperienceYears = 15,
                            Fname = "Dr. Layla",
                            Lname = "Ibrahim",
                            Password = "pswd123",
                            Specialization = "Neuroscience"
                        });
                });

            modelBuilder.Entity("WithYou_project.Database.Entities.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewId"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PsychologistId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReviewDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ReviewId");

                    b.HasIndex("PsychologistId");

                    b.HasIndex("UserId");

                    b.ToTable("Review");

                    b.HasData(
                        new
                        {
                            ReviewId = 1,
                            Comment = "Great session, helped a lot",
                            PsychologistId = 1,
                            Rating = 5,
                            ReviewDate = new DateTime(2022, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1
                        },
                        new
                        {
                            ReviewId = 2,
                            Comment = "Very informative and useful",
                            PsychologistId = 2,
                            Rating = 4,
                            ReviewDate = new DateTime(2022, 5, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 2
                        },
                        new
                        {
                            ReviewId = 3,
                            Comment = "Excellent session, highly recommend",
                            PsychologistId = 3,
                            Rating = 5,
                            ReviewDate = new DateTime(2022, 5, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 3
                        },
                        new
                        {
                            ReviewId = 4,
                            Comment = "The session was okay, but could improve",
                            PsychologistId = 4,
                            Rating = 3,
                            ReviewDate = new DateTime(2022, 5, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 4
                        },
                        new
                        {
                            ReviewId = 5,
                            Comment = "Really helped me with my mental health",
                            PsychologistId = 5,
                            Rating = 5,
                            ReviewDate = new DateTime(2022, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 5
                        });
                });

            modelBuilder.Entity("WithYou_project.Database.Entities.Session", b =>
                {
                    b.Property<int>("SessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SessionId"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PsychologistId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Time")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("SessionId");

                    b.HasIndex("PsychologistId");

                    b.HasIndex("UserId");

                    b.ToTable("Session");

                    b.HasData(
                        new
                        {
                            SessionId = 1,
                            Date = new DateTime(2022, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Session on Depression",
                            PsychologistId = 1,
                            Status = "Completed",
                            Time = "10:00 AM",
                            UserId = 1
                        },
                        new
                        {
                            SessionId = 2,
                            Date = new DateTime(2022, 5, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Session on Anxiety",
                            PsychologistId = 2,
                            Status = "Scheduled",
                            Time = "11:00 AM",
                            UserId = 2
                        },
                        new
                        {
                            SessionId = 3,
                            Date = new DateTime(2022, 5, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Session on Stress Management",
                            PsychologistId = 3,
                            Status = "Completed",
                            Time = "12:00 PM",
                            UserId = 3
                        },
                        new
                        {
                            SessionId = 4,
                            Date = new DateTime(2022, 5, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Therapy Session",
                            PsychologistId = 4,
                            Status = "Scheduled",
                            Time = "02:00 PM",
                            UserId = 4
                        },
                        new
                        {
                            SessionId = 5,
                            Date = new DateTime(2022, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Mental Health Session",
                            PsychologistId = 5,
                            Status = "Completed",
                            Time = "03:00 PM",
                            UserId = 5
                        });
                });

            modelBuilder.Entity("WithYou_project.Database.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            DateOfBirth = new DateTime(2000, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "yousef@example.com",
                            Fname = "Yousef",
                            Gender = "Male",
                            Lname = "Ali",
                            Password = "pass123",
                            Phone = "0591234567"
                        },
                        new
                        {
                            UserId = 2,
                            DateOfBirth = new DateTime(1998, 8, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "laila@example.com",
                            Fname = "Laila",
                            Gender = "Female",
                            Lname = "Hassan",
                            Password = "pass123",
                            Phone = "0591234568"
                        },
                        new
                        {
                            UserId = 3,
                            DateOfBirth = new DateTime(1995, 2, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ola@example.com",
                            Fname = "Ola",
                            Gender = "Female",
                            Lname = "Tariq",
                            Password = "pass123",
                            Phone = "0591234569"
                        },
                        new
                        {
                            UserId = 4,
                            DateOfBirth = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "hani@example.com",
                            Fname = "Hani",
                            Gender = "Male",
                            Lname = "Mohsen",
                            Password = "pass123",
                            Phone = "0591234570"
                        },
                        new
                        {
                            UserId = 5,
                            DateOfBirth = new DateTime(1993, 3, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "sami@example.com",
                            Fname = "Sami",
                            Gender = "Male",
                            Lname = "Ibrahim",
                            Password = "pass123",
                            Phone = "0591234571"
                        });
                });

            modelBuilder.Entity("WithYou_project.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("WithYou_project.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("WithYou_project.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WithYou_project.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("WithYou_project.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WithYou_project.Database.Entities.Article", b =>
                {
                    b.HasOne("WithYou_project.Database.Entities.Psychologist", "Psychologist")
                        .WithMany("Articles")
                        .HasForeignKey("PsychologistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Psychologist");
                });

            modelBuilder.Entity("WithYou_project.Database.Entities.Message", b =>
                {
                    b.HasOne("WithYou_project.Database.Entities.Problem", "Problem")
                        .WithMany()
                        .HasForeignKey("ProblemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WithYou_project.Database.Entities.Psychologist", "Psychologist")
                        .WithMany("Messages")
                        .HasForeignKey("PsychologistId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WithYou_project.Database.Entities.User", "User")
                        .WithMany("Message")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Problem");

                    b.Navigation("Psychologist");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WithYou_project.Database.Entities.Payment", b =>
                {
                    b.HasOne("WithYou_project.Database.Entities.Session", "Session")
                        .WithMany()
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WithYou_project.Database.Entities.User", "User")
                        .WithMany("Payments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Session");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WithYou_project.Database.Entities.Problem", b =>
                {
                    b.HasOne("WithYou_project.Database.Entities.Psychologist", "Psychologist")
                        .WithMany("Problems")
                        .HasForeignKey("PsychologistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WithYou_project.Database.Entities.User", "User")
                        .WithMany("Problems")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Psychologist");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WithYou_project.Database.Entities.Review", b =>
                {
                    b.HasOne("WithYou_project.Database.Entities.Psychologist", "Psychologist")
                        .WithMany("Reviews")
                        .HasForeignKey("PsychologistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WithYou_project.Database.Entities.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Psychologist");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WithYou_project.Database.Entities.Session", b =>
                {
                    b.HasOne("WithYou_project.Database.Entities.Psychologist", "Psychologist")
                        .WithMany("Sessions")
                        .HasForeignKey("PsychologistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WithYou_project.Database.Entities.User", "User")
                        .WithMany("Sessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Psychologist");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WithYou_project.Database.Entities.Psychologist", b =>
                {
                    b.Navigation("Articles");

                    b.Navigation("Messages");

                    b.Navigation("Problems");

                    b.Navigation("Reviews");

                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("WithYou_project.Database.Entities.User", b =>
                {
                    b.Navigation("Message");

                    b.Navigation("Payments");

                    b.Navigation("Problems");

                    b.Navigation("Reviews");

                    b.Navigation("Sessions");
                });
#pragma warning restore 612, 618
        }
    }
}
